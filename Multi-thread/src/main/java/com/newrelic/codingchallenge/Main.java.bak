package com.newrelic.codingchallenge;
import java.io.*;  
import java.net.*;  

import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;


public class Main {

    public static void main(String[] args) {

        System.out.println("Starting up server ....");

        // Add your code here
        try{
        	ServerSocket ss=new ServerSocket(4000);  
		Socket s=ss.accept();
                DataInputStream din=new DataInputStream(s.getInputStream());  
                DataOutputStream dout=new DataOutputStream(s.getOutputStream());  
                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
  
                String str="",str2="";  
                while(!str.equals("stop")){  
                   str=din.readUTF();  
                   System.out.println("client says: "+str);  
                   str2=br.readLine();  
                   dout.writeUTF(str2);  
                   dout.flush();  
                }  

        }
        catch (Exception e) {
        }


    }
}
/* Runnable class */
public class MultiThreadedServer implements Runnable{

    protected int          serverPort   = 4000;
    protected ServerSocket serverSocket = null;
    protected boolean      isStopped    = false;
    protected Thread       runningThread= null;

    public MultiThreadedServer(int port){
        this.serverPort = port;
    }

    public void run(){
        synchronized(this){
            this.runningThread = Thread.currentThread();
        }
        openServerSocket();
        while(! isStopped()){
            Socket clientSocket = null;
            try {
                clientSocket = this.serverSocket.accept();
            } catch (IOException e) {
                if(isStopped()) {
                    System.out.println("Server Stopped.") ;
                    return;
                }
                throw new RuntimeException(
                    "Error accepting client connection", e);
            }
            new Thread(
                new WorkerRunnable(
                    clientSocket, "Multithreaded Server")
            ).start();
        }
        System.out.println("Server Stopped.") ;
    }


    private synchronized boolean isStopped() {
        return this.isStopped;
    }

    public synchronized void stop(){
        this.isStopped = true;
        try {
            this.serverSocket.close();
        } catch (IOException e) {
            throw new RuntimeException("Error closing server", e);
        }
    }

    private void openServerSocket() {
        try {
            this.serverSocket = new ServerSocket(this.serverPort);
        } catch (IOException e) {
            throw new RuntimeException("Cannot open port 8080", e);
        }
    }

}

